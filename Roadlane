import cv2
import numpy as np

def detect_lanes(image):
    # Step 2: Convert to grayscale and apply Gaussian blur
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)

    # Step 3: Apply Canny edge detection
    edges = cv2.Canny(blur, 50, 150)

    # Step 4: Define region of interest
    mask = np.zeros_like(edges)
    ignore_mask_color = 255
    height, width = edges.shape[:2]
    vertices = np.array([[
        (0, height),
        (width / 2, height / 2),
        (width, height),
    ]], dtype=np.int32)
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    masked_edges = cv2.bitwise_and(edges, mask)

    # Step 5: Apply Hough transform to find lines
    lines = cv2.HoughLinesP(masked_edges, rho=1, theta=np.pi/180, threshold=20, minLineLength=20, maxLineGap=300)

    # Step 6: Draw lines on the original image
    line_image = np.zeros_like(image)
    for line in lines:
        for x1, y1, x2, y2 in line:
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 5)

    # Step 7: Combine the original image with lane lines
    result = cv2.addWeighted(image, 0.8, line_image, 1, 0)

    return result

# Example usage with video feed
cap = cv2.VideoCapture('test_video.mp4')
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    processed_frame = detect_lanes(frame)
    cv2.imshow('Lane Detection', processed_frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
